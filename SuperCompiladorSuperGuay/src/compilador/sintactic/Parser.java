
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador.sintactic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import compilador.Symbols.*;
import compilador.ts.*;
import Codi3A.*;
import compilador.lexic.TokensFile;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\007\000\002\005\010\000\002\011\003\000\002" +
    "\011\003\000\002\012\005\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\005\000" +
    "\002\014\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\004" +
    "\000\002\016\005\000\002\016\003\000\002\040\006\000" +
    "\002\040\003\000\002\017\005\000\002\017\003\000\002" +
    "\020\005\000\002\020\003\000\002\006\006\000\002\007" +
    "\006\000\002\021\004\000\002\022\004\000\002\022\006" +
    "\000\002\010\010\000\002\023\004\000\002\024\005\000" +
    "\002\024\006\000\002\025\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\026\002\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\004" +
    "\000\002\027\004\000\002\030\014\000\002\031\006\000" +
    "\002\031\002\000\002\032\013\000\002\033\015\000\002" +
    "\034\005\000\002\034\006\000\002\035\005\000\002\035" +
    "\003\000\002\036\006\000\002\037\003\000\002\037\003" +
    "\000\002\041\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\002\uffff\045\004\001\002\000\014\004" +
    "\007\005\014\040\023\044\015\050\025\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\004\040" +
    "\ufff6\001\002\000\016\002\ufffa\004\ufffa\005\ufffa\040\ufffa" +
    "\044\ufffa\050\ufffa\001\002\000\016\002\ufffb\004\ufffb\005" +
    "\ufffb\040\ufffb\044\ufffb\050\ufffb\001\002\000\006\017\030" +
    "\023\230\001\002\000\004\015\221\001\002\000\004\040" +
    "\ufff5\001\002\000\004\040\217\001\002\000\016\002\ufff9" +
    "\004\ufff9\005\ufff9\040\ufff9\044\ufff9\050\ufff9\001\002\000" +
    "\016\002\ufffc\004\ufffc\005\ufffc\040\ufffc\044\ufffc\050\ufffc" +
    "\001\002\000\004\040\204\001\002\000\016\002\ufffd\004" +
    "\ufffd\005\ufffd\040\ufffd\044\ufffd\050\ufffd\001\002\000\004" +
    "\015\107\001\002\000\012\014\uffde\017\uffde\021\uffde\023" +
    "\uffde\001\002\000\016\002\000\004\007\005\014\040\023" +
    "\044\015\050\025\001\002\000\006\004\007\005\014\001" +
    "\002\000\004\040\023\001\002\000\006\017\030\023\031" +
    "\001\002\000\016\013\036\035\042\036\035\037\037\040" +
    "\041\041\032\001\002\000\016\013\036\035\042\036\035" +
    "\037\037\040\041\041\032\001\002\000\042\014\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\042" +
    "\uffe5\043\uffe5\001\002\000\040\014\uffeb\020\uffeb\022\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\042\uffeb\043\uffeb\001\002" +
    "\000\044\014\uffe6\017\030\020\uffe6\021\uffe6\022\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\042\uffe6\043\uffe6\001\002\000" +
    "\042\014\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\042\uffe4\043\uffe4\001\002\000\016\013\036" +
    "\035\042\036\035\037\037\040\041\041\032\001\002\000" +
    "\042\014\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\042\uffe3\043\uffe3\001\002\000\020\022\070" +
    "\026\071\027\063\030\067\031\064\032\072\033\066\001" +
    "\002\000\050\013\054\014\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\042\uffde" +
    "\043\uffde\001\002\000\016\013\036\035\042\036\035\037" +
    "\037\040\041\041\032\001\002\000\036\014\ufff3\022\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\050\035\046\042\047\043\051\001\002" +
    "\000\042\014\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\042\uffe0\043\uffe0\001\002\000\016\013" +
    "\036\035\042\036\035\037\037\040\041\041\032\001\002" +
    "\000\016\013\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\001\002\000\016\013\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\001\002\000\016\013\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\001\002\000\016\013\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\001\002\000" +
    "\040\014\uffec\020\uffec\022\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\042\uffec\043\uffec\001\002\000\042\014\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\042\uffe2" +
    "\043\uffe2\001\002\000\020\013\036\014\057\035\042\036" +
    "\035\037\037\040\041\041\032\001\002\000\006\014\uffbe" +
    "\021\uffbe\001\002\000\006\014\061\021\060\001\002\000" +
    "\042\014\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\042\uffc1\043\uffc1\001\002\000\016\013\036" +
    "\035\042\036\035\037\037\040\041\041\032\001\002\000" +
    "\042\014\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\042\uffc0\043\uffc0\001\002\000\006\014\uffbf" +
    "\021\uffbf\001\002\000\016\013\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\001\002\000\016\013\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\001\002\000\016\013" +
    "\036\035\042\036\035\037\037\040\041\041\032\001\002" +
    "\000\016\013\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\001\002\000\016\013\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\001\002\000\034\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\010\ufff7\011\ufff7\012\ufff7\016\ufff7\040\ufff7" +
    "\044\ufff7\046\ufff7\047\ufff7\050\ufff7\001\002\000\016\013" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\001\002" +
    "\000\016\013\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\001\002\000\036\014\ufff4\022\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\050\035\046\042\047\043\051\001\002\000\010\014\uffdc" +
    "\024\uffdc\025\102\001\002\000\006\014\100\024\077\001" +
    "\002\000\024\014\uffda\024\uffda\025\uffda\026\071\027\063" +
    "\030\067\031\064\032\072\033\066\001\002\000\016\013" +
    "\036\035\042\036\035\037\037\040\041\041\032\001\002" +
    "\000\042\014\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\042\uffe1\043\uffe1\001\002\000\010\014" +
    "\uffdd\024\uffdd\025\102\001\002\000\016\013\036\035\042" +
    "\036\035\037\037\040\041\041\032\001\002\000\024\014" +
    "\uffdb\024\uffdb\025\uffdb\026\071\027\063\030\067\031\064" +
    "\032\072\033\066\001\002\000\014\020\105\034\050\035" +
    "\046\042\047\043\051\001\002\000\046\014\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\042\uffdf\043\uffdf\001\002\000\016\002\ufffe\004" +
    "\ufffe\005\ufffe\040\ufffe\044\ufffe\050\ufffe\001\002\000\026" +
    "\004\007\005\014\006\115\010\114\011\120\016\uffcc\040" +
    "\041\046\125\047\122\050\025\001\002\000\004\022\203" +
    "\001\002\000\030\004\uffcb\005\uffcb\006\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\016\uffcb\040\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\001\002\000\004\022\202\001\002\000\004\016\201\001" +
    "\002\000\004\013\171\001\002\000\004\013\154\001\002" +
    "\000\030\004\007\005\014\006\115\010\114\011\120\012" +
    "\uffcc\016\uffcc\040\041\046\125\047\122\050\025\001\002" +
    "\000\030\004\uffc9\005\uffc9\006\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\016\uffc9\040\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002" +
    "\000\004\015\141\001\002\000\004\040\023\001\002\000" +
    "\004\013\uffbb\001\002\000\030\004\uffca\005\uffca\006\uffca" +
    "\010\uffca\011\uffca\012\uffca\016\uffca\040\uffca\046\uffca\047" +
    "\uffca\050\uffca\001\002\000\004\013\132\001\002\000\004" +
    "\013\uffbc\001\002\000\030\004\007\005\014\006\115\010" +
    "\114\011\120\012\uffcc\016\uffcc\040\041\046\125\047\122" +
    "\050\025\001\002\000\030\004\007\005\014\006\115\010" +
    "\114\011\120\012\uffcc\016\uffcc\040\041\046\125\047\122" +
    "\050\025\001\002\000\006\012\uffce\016\uffce\001\002\000" +
    "\006\012\uffcd\016\uffcd\001\002\000\016\013\036\035\042" +
    "\036\035\037\037\040\041\041\032\001\002\000\004\014" +
    "\134\001\002\000\004\022\uffbd\001\002\000\006\017\030" +
    "\023\136\001\002\000\016\013\036\035\042\036\035\037" +
    "\037\040\041\041\032\001\002\000\020\022\140\026\071" +
    "\027\063\030\067\031\064\032\072\033\066\001\002\000" +
    "\034\002\ufff8\004\ufff8\005\ufff8\006\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\016\ufff8\040\ufff8\044\ufff8\046\ufff8\047\ufff8\050" +
    "\ufff8\001\002\000\026\004\uffba\005\uffba\006\uffba\010\uffba" +
    "\011\uffba\016\uffba\040\uffba\046\uffba\047\uffba\050\uffba\001" +
    "\002\000\026\004\007\005\014\006\115\010\114\011\120" +
    "\016\uffcc\040\041\046\125\047\122\050\025\001\002\000" +
    "\004\016\144\001\002\000\004\010\145\001\002\000\004" +
    "\013\146\001\002\000\016\013\036\035\042\036\035\037" +
    "\037\040\041\041\032\001\002\000\006\014\150\024\077" +
    "\001\002\000\004\022\uffba\001\002\000\004\022\152\001" +
    "\002\000\030\004\uffc2\005\uffc2\006\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\016\uffc2\040\uffc2\046\uffc2\047\uffc2\050\uffc2\001" +
    "\002\000\006\012\uffcf\016\uffcf\001\002\000\016\013\036" +
    "\035\042\036\035\037\037\040\041\041\032\001\002\000" +
    "\006\014\156\024\077\001\002\000\004\015\157\001\002" +
    "\000\026\004\uffba\005\uffba\006\uffba\010\uffba\011\uffba\016" +
    "\uffba\040\uffba\046\uffba\047\uffba\050\uffba\001\002\000\026" +
    "\004\007\005\014\006\115\010\114\011\120\016\uffcc\040" +
    "\041\046\125\047\122\050\025\001\002\000\004\016\162" +
    "\001\002\000\032\004\uffc4\005\uffc4\006\uffc4\007\163\010" +
    "\uffc4\011\uffc4\012\uffc4\016\uffc4\040\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\001\002\000\004\015\166\001\002\000\030\004" +
    "\uffba\005\uffba\006\uffba\010\uffba\011\uffba\012\uffba\016\uffba" +
    "\040\uffba\046\uffba\047\uffba\050\uffba\001\002\000\030\004" +
    "\uffc6\005\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\016\uffc6" +
    "\040\uffc6\046\uffc6\047\uffc6\050\uffc6\001\002\000\026\004" +
    "\007\005\014\006\115\010\114\011\120\016\uffcc\040\041" +
    "\046\125\047\122\050\025\001\002\000\004\016\170\001" +
    "\002\000\030\004\uffc5\005\uffc5\006\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\016\uffc5\040\uffc5\046\uffc5\047\uffc5\050\uffc5\001" +
    "\002\000\016\013\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\001\002\000\016\013\036\035\042\036\035\037" +
    "\037\040\041\041\032\001\002\000\006\014\174\024\077" +
    "\001\002\000\004\015\175\001\002\000\026\004\007\005" +
    "\014\006\115\010\114\011\120\016\uffcc\040\041\046\125" +
    "\047\122\050\025\001\002\000\004\016\177\001\002\000" +
    "\030\004\uffba\005\uffba\006\uffba\010\uffba\011\uffba\012\uffba" +
    "\016\uffba\040\uffba\046\uffba\047\uffba\050\uffba\001\002\000" +
    "\030\004\uffc3\005\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\016\uffc3\040\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000" +
    "\016\002\uffd8\004\uffd8\005\uffd8\040\uffd8\044\uffd8\050\uffd8" +
    "\001\002\000\030\004\uffc7\005\uffc7\006\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\016\uffc7\040\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\001\002\000\030\004\uffc8\005\uffc8\006\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\016\uffc8\040\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\001\002\000\010\013\206\017\uffde\023\uffde\001\002\000" +
    "\004\015\uffd3\001\002\000\010\004\007\005\014\014\211" +
    "\001\002\000\004\040\023\001\002\000\006\014\213\021" +
    "\212\001\002\000\004\015\uffd2\001\002\000\006\004\007" +
    "\005\014\001\002\000\004\015\uffd1\001\002\000\004\040" +
    "\023\001\002\000\010\014\uffd5\017\030\021\uffd5\001\002" +
    "\000\010\014\uffd6\017\030\021\uffd6\001\002\000\004\013" +
    "\206\001\002\000\004\015\uffd7\001\002\000\026\004\007" +
    "\005\014\006\115\010\114\011\120\012\uffcc\040\041\046" +
    "\125\047\122\050\025\001\002\000\004\012\224\001\002" +
    "\000\004\022\226\001\002\000\016\013\036\035\042\036" +
    "\035\037\037\040\041\041\032\001\002\000\020\022\uffd0" +
    "\026\071\027\063\030\067\031\064\032\072\033\066\001" +
    "\002\000\004\016\227\001\002\000\016\002\uffd4\004\uffd4" +
    "\005\uffd4\040\uffd4\044\uffd4\050\uffd4\001\002\000\016\013" +
    "\036\035\042\036\035\037\037\040\041\041\032\001\002" +
    "\000\020\022\232\026\071\027\063\030\067\031\064\032" +
    "\072\033\066\001\002\000\034\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\010\uffd9\011\uffd9\012\uffd9\016\uffd9\040\uffd9\044" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\002\004\001\001\000\026\003\023\004" +
    "\020\005\016\006\010\007\007\010\015\011\017\021\021" +
    "\023\012\040\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\204\040\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\105\005\016" +
    "\006\010\007\007\010\015\011\017\021\021\023\012\040" +
    "\011\001\001\000\004\011\025\001\001\000\004\040\026" +
    "\001\001\000\002\001\001\000\012\014\103\016\032\034" +
    "\043\040\033\001\001\000\014\012\037\014\042\016\032" +
    "\034\043\040\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\075" +
    "\014\042\016\032\017\074\020\073\034\043\040\033\001" +
    "\001\000\002\001\001\000\004\013\064\001\001\000\002" +
    "\001\001\000\010\016\052\034\043\040\033\001\001\000" +
    "\004\015\044\001\001\000\002\001\001\000\010\016\051" +
    "\034\043\040\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\054\034\043\035\055\040" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\061\034\043\040\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\072\016\032\034\043\040\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\064" +
    "\001\001\000\016\012\075\014\042\016\032\020\100\034" +
    "\043\040\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\102\014\042\016\032\034\043\040\033\001" +
    "\001\000\004\013\064\001\001\000\004\015\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\126\006" +
    "\125\011\120\026\112\027\115\030\110\032\122\033\116" +
    "\034\107\036\111\037\123\040\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\126\006" +
    "\125\011\120\026\152\027\115\030\110\032\122\033\116" +
    "\034\107\036\111\037\123\040\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\126\006\125\011\120\026\130\027\115" +
    "\030\110\032\122\033\116\034\107\036\111\037\123\040" +
    "\011\001\001\000\032\005\126\006\125\011\120\026\127" +
    "\027\115\030\110\032\122\033\116\034\107\036\111\037" +
    "\123\040\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\132\034\043\040\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\136" +
    "\014\042\016\032\034\043\040\033\001\001\000\004\013" +
    "\064\001\001\000\002\001\001\000\004\041\141\001\001" +
    "\000\032\005\126\006\125\011\120\026\142\027\115\030" +
    "\110\032\122\033\116\034\107\036\111\037\123\040\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\075\014\042\016\032\017\146\020\073" +
    "\034\043\040\033\001\001\000\002\001\001\000\004\041" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\075\014\042\016\032\017\154\020" +
    "\073\034\043\040\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\157\001\001\000\032\005\126\006" +
    "\125\011\120\026\160\027\115\030\110\032\122\033\116" +
    "\034\107\036\111\037\123\040\011\001\001\000\002\001" +
    "\001\000\004\031\163\001\001\000\002\001\001\000\004" +
    "\041\164\001\001\000\002\001\001\000\032\005\126\006" +
    "\125\011\120\026\166\027\115\030\110\032\122\033\116" +
    "\034\107\036\111\037\123\040\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\171\001\001\000\020" +
    "\012\075\014\042\016\032\017\172\020\073\034\043\040" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\126\006\125\011\120\026\175\027\115\030\110\032" +
    "\122\033\116\034\107\036\111\037\123\040\011\001\001" +
    "\000\002\001\001\000\004\041\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\206\022" +
    "\207\001\001\000\004\040\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\213\001\001\000\002\001" +
    "\001\000\004\040\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\126\006\125\011\120\026\221\027\115\030\110\032\122" +
    "\033\116\034\107\036\111\037\123\040\011\001\001\000" +
    "\004\025\222\001\001\000\002\001\001\000\014\012\224" +
    "\014\042\016\032\034\043\040\033\001\001\000\004\013" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\012\230\014\042\016\032\034\043\040\033\001\001\000" +
    "\004\013\064\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol n = this.scanner.next_token();
    tokensFile.addToken(n.toString());
    return n;

    }



    public TaulaSimbols taulaSimbols = new TaulaSimbols();
    public Generador generador = new Generador();




public TokensFile tokensFile = new TokensFile();
private Scanner scanner;
public SymbolBegin SB;

public void setScanner(Scanner scanner){
    this.scanner = scanner;
}

public int getLinea(){
return cur_token.left;
}
@Override
public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws Exception {
//    report_error("Error sintàctic catastròfic Linea:", cur_token);
    System.err.println("Linea:"+ (this.cur_token.left+1)+"Error sintàctic catastròfic ");
    done_parsing();
    System.exit(1);
}

@Override
public void syntax_error(java_cup.runtime.Symbol cur_token) {
    //report_error("de sintaxis", cur_token);
}





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BEGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolBegin start_val = (SymbolBegin)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BEGIN ::= UWU LLISTADECL 
            {
              SymbolBegin RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolLlistDecl v1 = (SymbolLlistDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		SB = new SymbolBegin(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BEGIN ::= 
            {
              SymbolBegin RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEGIN",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LLISTADECL ::= LLISTADECL DECL 
            {
              SymbolLlistDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolLlistDecl v1 = (SymbolLlistDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecl v2 = (SymbolDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolLlistDecl(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLISTADECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LLISTADECL ::= DECL 
            {
              SymbolLlistDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolDecl v1 = (SymbolDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolLlistDecl(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLISTADECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= VAR 
            {
              SymbolDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDecl(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= ASSIG 
            {
              SymbolDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolAssig v1 = (SymbolAssig)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDecl(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= BUIT 
            {
              SymbolDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolBuit v1 = (SymbolBuit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDecl(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL ::= FULL 
            {
              SymbolDecl RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolFull v1 = (SymbolFull)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolDecl(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VAR ::= TVAR ARRAY IGUAL EXPRESP PCOMA 
            {
              SymbolVar RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolTVar v1 = (SymbolTVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolArray v2 = (SymbolArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpResp v3 = (SymbolExpResp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolVar(this.parser,v1,v2,v3,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VAR ::= CONST TVAR ARRAY IGUAL EXPRESP PCOMA 
            {
              SymbolVar RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SymbolTVar v1 = (SymbolTVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolArray v2 = (SymbolArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpResp v3 = (SymbolExpResp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolVar(this.parser,v1,v2,v3,cur_token.left, 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TVAR ::= INT 
            {
              SymbolTVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTVar(this.parser,"int",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TVAR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TVAR ::= BOOLEAN 
            {
              SymbolTVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolTVar(this.parser,"boolean",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TVAR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESP ::= EXPRESP ORESP EXPARI 
            {
              SymbolExpResp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpResp v1 = (SymbolExpResp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOResp v2 = (SymbolOResp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpAri v3 = (SymbolExpAri)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolExpResp(this.parser,v1,v2,v3,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESP",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESP ::= EXPARI 
            {
              SymbolExpResp RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpAri v1 = (SymbolExpAri)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolExpResp(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESP",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ORESP ::= MENOR 
            {
              SymbolOResp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOResp(this.parser,"<",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ORESP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ORESP ::= MAJOR 
            {
              SymbolOResp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOResp(this.parser,">",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ORESP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ORESP ::= NOTEQ 
            {
              SymbolOResp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOResp(this.parser,"!=",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ORESP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ORESP ::= IGUALIGUAL 
            {
              SymbolOResp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOResp(this.parser,"==",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ORESP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ORESP ::= MAJORIG 
            {
              SymbolOResp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOResp(this.parser,">=",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ORESP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ORESP ::= MENORIG 
            {
              SymbolOResp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOResp(this.parser,"<=",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ORESP",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPARI ::= EXPARI OARI OPERND 
            {
              SymbolExpAri RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpAri v1 = (SymbolExpAri)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOAri v2 = (SymbolOAri)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOpernd v3 = (SymbolOpernd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpAri(this.parser,v1,v2,v3,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPARI",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPARI ::= OPERND 
            {
              SymbolExpAri RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOpernd v1 = (SymbolOpernd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpAri(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPARI",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OARI ::= SUMA 
            {
              SymbolOAri RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOAri(this.parser,"+",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OARI",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OARI ::= RESTA 
            {
              SymbolOAri RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOAri(this.parser,"-",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OARI",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OARI ::= PROD 
            {
              SymbolOAri RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOAri(this.parser,"*",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OARI",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OARI ::= DIV 
            {
              SymbolOAri RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOAri(this.parser,"/",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OARI",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERND ::= ARRAY 
            {
              SymbolOpernd RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArray v1 = (SymbolArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpernd(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERND",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERND ::= NUM 
            {
              SymbolOpernd RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpernd(this.parser,(Integer)v,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERND",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERND ::= TRUE 
            {
              SymbolOpernd RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpernd(this.parser,(String)v,1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERND",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERND ::= FALSE 
            {
              SymbolOpernd RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpernd(this.parser,(String)v,2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERND",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERND ::= RESTA OPERND 
            {
              SymbolOpernd RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOpernd v1 = (SymbolOpernd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpernd(this.parser,"-",v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERND",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERND ::= LPAR EXPLO RPAR 
            {
              SymbolOpernd RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpLo v1 = (SymbolExpLo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolOpernd(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERND",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERND ::= CRIDADA 
            {
              SymbolOpernd RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCridada v1 = (SymbolCridada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolOpernd(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERND",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARRAY ::= ARRAY LBRA EXPARI RBRA 
            {
              SymbolArray RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolArray v1 = (SymbolArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpAri v2 = (SymbolExpAri)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SymbolArray(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARRAY ::= ID 
            {
              SymbolArray RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolArray(this.parser,(String)v,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPLO ::= EXPLO OR EXPAND 
            {
              SymbolExpLo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpLo v1 = (SymbolExpLo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpAnd v2 = (SymbolExpAnd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpLo(this.parser,v1,"||",v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPLO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPLO ::= EXPAND 
            {
              SymbolExpLo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpAnd v1 = (SymbolExpAnd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpLo(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPLO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPAND ::= EXPAND AND EXPRESP 
            {
              SymbolExpAnd RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolExpAnd v1 = (SymbolExpAnd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpResp v2 = (SymbolExpResp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpAnd(this.parser,v1,"&&",v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPAND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPAND ::= EXPRESP 
            {
              SymbolExpAnd RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpResp v1 = (SymbolExpResp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new SymbolExpAnd(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPAND",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASSIG ::= ARRAY IGUAL EXPRESP PCOMA 
            {
              SymbolAssig RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolArray v1 = (SymbolArray)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolExpResp v2 = (SymbolExpResp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolAssig(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIG",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BUIT ::= CAPVOID LCOR COS RCOR 
            {
              SymbolBuit RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolCapVoid v1 = (SymbolCapVoid)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolBuit(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUIT",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CAPVOID ::= VOID CAPFULL_2 
            {
              SymbolCapVoid RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCapFull_2 v1 = (SymbolCapFull_2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolCapVoid(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAPVOID",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARGS ::= TVAR ARRAY 
            {
              SymbolArgs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTVar v1 = (SymbolTVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArray v2 = (SymbolArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolArgs(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARGS ::= ARGS COMA TVAR ARRAY 
            {
              SymbolArgs RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolArgs v1 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTVar v2 = (SymbolTVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolArray v3 = (SymbolArray)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolArgs(this.parser,v1,v2,v3,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FULL ::= CAPFULL_1 LCOR COS RETU PCOMA RCOR 
            {
              SymbolFull RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolCapFull_1 v1 = (SymbolCapFull_1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolRetu v3 = (SymbolRetu)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new SymbolFull(this.parser,v1,v2,v3,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FULL",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CAPFULL_1 ::= TVAR CAPFULL_2 
            {
              SymbolCapFull_1 RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolTVar v1 = (SymbolTVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCapFull_2 v2 = (SymbolCapFull_2)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolCapFull_1(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAPFULL_1",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CAPFULL_2 ::= ID LPAR RPAR 
            {
              SymbolCapFull_2 RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new SymbolCapFull_2(this.parser,(String)v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAPFULL_2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CAPFULL_2 ::= ID LPAR ARGS RPAR 
            {
              SymbolCapFull_2 RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArgs v1 = (SymbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolCapFull_2(this.parser,v1,(String)v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAPFULL_2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETU ::= RETURN EXPRESP 
            {
              SymbolRetu RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolExpResp v1 = (SymbolExpResp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolRetu(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETU",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COS ::= INSTR COS 
            {
              SymbolCos RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstR v1 = (SymbolInstR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolCos(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COS ::= VAR COS 
            {
              SymbolCos RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolVar v1 = (SymbolVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolCos(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COS ::= ASSIG COS 
            {
              SymbolCos RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolAssig v1 = (SymbolAssig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolCos(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COS ::= 
            {
              SymbolCos RESULT =null;
		RESULT = new SymbolCos(this.parser,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTR ::= INSTIF 
            {
              SymbolInstR RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInstIf v1 = (SymbolInstIf)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolInstR(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTR ::= INSTWHILE 
            {
              SymbolInstR RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInstWhile v1 = (SymbolInstWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolInstR(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTR ::= INSTDOWHILE 
            {
              SymbolInstR RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolInstDoWhile v1 = (SymbolInstDoWhile)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolInstR(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTR ::= CRIDADA PCOMA 
            {
              SymbolInstR RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolCridada v1 = (SymbolCridada)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolInstR(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTR ::= IO PCOMA 
            {
              SymbolInstR RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolIo v1 = (SymbolIo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolInstR(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTIF ::= IF LPAR EXPLO RPAR LCOR M1 COS RCOR INSTIF2 M1 
            {
              SymbolInstIf RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolExpLo v1 = (SymbolExpLo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		M1 v4 = (M1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolInstIf2 v3 = (SymbolInstIf2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolInstIf(this.parser,v1,v2,v3,v4,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTIF",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTIF2 ::= ELSE LCOR COS RCOR 
            {
              SymbolInstIf2 RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolCos v1 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolInstIf2(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTIF2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTIF2 ::= 
            {
              SymbolInstIf2 RESULT =null;
		RESULT = new SymbolInstIf2(this.parser,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTIF2",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTWHILE ::= WHILE LPAR M1 EXPLO RPAR LCOR COS RCOR M1 
            {
              SymbolInstWhile RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		M1 v3 = (M1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SymbolExpLo v1 = (SymbolExpLo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolCos v2 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new SymbolInstWhile(this.parser,v1,v2,v3,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTWHILE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTDOWHILE ::= DO LCOR M1 COS RCOR WHILE LPAR EXPLO RPAR M1 PCOMA 
            {
              SymbolInstDoWhile RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		M1 v3 = (M1)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		SymbolCos v1 = (SymbolCos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolExpLo v2 = (SymbolExpLo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new SymbolInstDoWhile(this.parser,v1,v2,v3,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTDOWHILE",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CRIDADA ::= ID LPAR RPAR 
            {
              SymbolCridada RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new SymbolCridada(this.parser,(String)v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDADA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CRIDADA ::= ID LPAR ARGCRID RPAR 
            {
              SymbolCridada RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolArgCrid v2 = (SymbolArgCrid)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolCridada(this.parser,(String)v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDADA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARGCRID ::= ARGCRID COMA OPERND 
            {
              SymbolArgCrid RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SymbolArgCrid v1 = (SymbolArgCrid)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOpernd v2 = (SymbolOpernd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolArgCrid(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGCRID",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARGCRID ::= OPERND 
            {
              SymbolArgCrid RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SymbolOpernd v1 = (SymbolOpernd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolArgCrid(this.parser,v1,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGCRID",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IO ::= TIO LPAR OPERND RPAR 
            {
              SymbolIo RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SymbolTIo v1 = (SymbolTIo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SymbolOpernd v2 = (SymbolOpernd)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new SymbolIo(this.parser,v1,v2,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IO",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIO ::= ET 
            {
              SymbolTIo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolTIo(this.parser, "ET",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIO",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIO ::= ST 
            {
              SymbolTIo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SymbolTIo(this.parser, "ST",cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIO",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // M1 ::= 
            {
              M1 RESULT =null;
		RESULT = new M1(this.parser,cur_token.left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
